import Head from "next/head";
import Link from "next/link";
import { AnimatePresence, motion } from "framer-motion";

export default function Hero() {
  const line1 = "HANAS";
  const line2 = "YULIANTO";

  return (
    <main className="relative flex flex-col justify-center min-h-screen px-10">
      <div className="fixed inset-x-0 top-0 w-screen h-4 bg-white" />
      <div className="relative m-auto">
        <AnimatePresence>
          <motion.div
            className="text-7xl sm:text-8xl md:text-9xl font-black relative"
            animate={{
              scale: 0.9,
              translateY: -40,
              transition: {
                ease: "linear",
                delay: 6,
              },
            }}
          >
            <h1>I AM</h1>
            <motion.h1
              initial="hidden"
              animate="visible"
              variants={{
                hidden: { opacity: 0, x: "-100%" },
                visible: {
                  opacity: 1,
                  x: `0%`,
                  transition: {
                    type: "spring",
                    duration: 1.5,
                    bounce: 0.5,
                    staggerChildren: 0.4,
                    delayChildren: 3.2,
                  },
                },
              }}
            >
              <motion.span>YU</motion.span>
              {line1.split("").map((char, index) => (
                <motion.span
                  key={index}
                  variants={{
                    hidden: { display: "none" },
                    visible: { display: "inline-block" },
                  }}
                >
                  {char}
                </motion.span>
              ))}
              <motion.span
                initial="visible"
                animate="fadeout"
                variants={{
                  visible: { display: "inline-block" },
                  fadeout: {
                    x: "-100%",
                    opacity: 0.4,
                    transition: {
                      delay: 2,
                      duration: 1,
                    },
                    transitionEnd: {
                      display: "none",
                    },
                  },
                }}
              >
                YU
              </motion.span>
            </motion.h1>
            <motion.h1
              initial="hidden"
              animate="visible"
              variants={{
                hidden: { display: "block", opacity: 0, y: "-100%" },
                visible: {
                  opacity: 1,
                  y: "0%",
                },
              }}
              transition={{
                type: "spring",
                delay: 5,
                stiffness: 150,
                mass: 1,
                damping: 13,
              }}
              whileHover={{
                scale: [null, 1.2, 1.1],
              }}
            >
              {line2}
            </motion.h1>
            <motion.p
              className="text-center text-sm sm:text-2xl font-bold"
              initial="hidden"
              animate="visible"
              variants={{
                hidden: {
                  y: "50",
                  opacity: 0,
                },
                visible: {
                  y: 0,
                  opacity: 1,
                  transition: {
                    ease: "anticipate",
                    delay: 6,
                    duration: 1,
                  },
                },
              }}
            >
              [ A WEB DEVELOPER BASED IN INDONESIA ]
            </motion.p>
          </motion.div>
        </AnimatePresence>
      </div>

      <div className="absolute bottom-0 inset-x-0 flex flex-col justify-center items-center text-white">
        <motion.div
          initial="hidden"
          animate="visible"
          variants={{
            hidden: { opacity: 0 },
            visible: {
              opacity: 1,
              y: 10,
              transition: {
                repeat: Infinity,
                repeatType: "loop",
                duration: 0.75,
              },
            },
          }}
        >
          <CaretDownIcon size={30} />
        </motion.div>
        <motion.div
          initial="hidden"
          animate="visible"
          variants={{
            hidden: { opacity: 0 },
            visible: {
              opacity: 1,
              transition: {
                repeat: Infinity,
                duration: 0.4,
                repeatType: "mirror",
              },
            },
          }}
        >
          <CaretDoubleDownIcon size={30} />
        </motion.div>
      </div>
    </main>
  );
}

function Home() {
  return (
    <>
      <Head>
        <title>masyuyu</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col justify-center min-h-screen px-10">
        <div className="flex flex-col gap-6">
          <h1 className="text-2xl sm:text-4xl font-black">
            hi{" "}
            <motion.div
              className="inline-block"
              animate={{ opacity: 1, rotateZ: [0, 15, 0] }}
              transition={{ duration: 1, repeat: Infinity }}
            >
              ðŸ‘‹
            </motion.div>{" "}
            ...
            <br />
            Iâ€™m Yuhanas Yulianto
            <br />
            Web Developer Based in Indonesia
          </h1>

          <div className="flex flex-wrap gap-4 items-center">
            <motion.div
              className="max-w-sm py-2 pl-6 pr-4 border border-zinc-800 rounded-full flex items-center gap-4"
              whileHover={{ scale: 1.2 }}
            >
              <h2 className="text-xl sm:text-2xl font-bold bg-gradient-to-br from-violet-400 to-fuchsia-300 bg-clip-text text-transparent">
                let&apos;s connect
              </h2>
              <motion.div>
                <CaretCircleDoubleRightIcon size={28} />
              </motion.div>
            </motion.div>

            <div className="flex text-slate-50 justify-center gap-4">
              <Link href="https://twitter.com/yuhanasyu" className="bg-zinc-900 border-t border-zinc-800 rounded-lg p-2">
                <TwitterIcon size={28} />
              </Link>
              <Link
                href="https://www.linkedin.com/in/yuhanas-yulianto-28474612a"
                className="bg-zinc-900 border-t border-zinc-800 rounded-lg p-2"
              >
                <LinkedinIcon size={28} />
              </Link>
              <Link href="https://github.com/yuhanasy" className="bg-zinc-900 border-t border-zinc-800 rounded-lg p-2">
                <GithubIcon size={28} />
              </Link>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

const CaretDownIcon = ({ size = 24, width, height, color = "currentColor" }) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width={width ?? size} height={height ?? size} fill={color} viewBox="0 0 256 256">
      <rect width="256" height="256" fill="none"></rect>
      <polyline
        points="208 96 128 176 48 96"
        fill="none"
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="16"
      ></polyline>
    </svg>
  );
};

const CaretDoubleDownIcon = ({ size = 24, width, height, color = "currentColor" }) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width={width ?? size} height={height ?? size} fill={color} viewBox="0 0 256 256">
      <rect width="256" height="256" fill="none"></rect>
      <polyline
        points="208 128 128 208 48 128"
        fill="none"
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="16"
      ></polyline>
      <polyline
        points="208 48 128 128 48 48"
        fill="none"
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="16"
      ></polyline>
    </svg>
  );
};

const CaretCircleDoubleRightIcon = ({ size = 24, width, height, color = "currentColor" }) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width={width ?? size} height={height ?? size} fill={color} viewBox="0 0 256 256">
      <rect width="256" height="256" fill="none"></rect>
      <path d="M201.5,54.5a104,104,0,1,0,0,147A103.9,103.9,0,0,0,201.5,54.5Zm-75.8,79.2-32,32a8.2,8.2,0,0,1-11.4,0,8.1,8.1,0,0,1,0-11.4L108.7,128,82.3,101.7A8.1,8.1,0,0,1,93.7,90.3l32,32A8.1,8.1,0,0,1,125.7,133.7Zm56,0-32,32a8.2,8.2,0,0,1-11.4,0,8.1,8.1,0,0,1,0-11.4L164.7,128l-26.4-26.3a8.1,8.1,0,0,1,11.4-11.4l32,32A8.1,8.1,0,0,1,181.7,133.7Z"></path>
    </svg>
  );
};

const TwitterIcon = ({ size = 24, width, height, color = "currentColor" }) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width={width ?? size} height={height ?? size} fill={color} viewBox="0 0 256 256">
      <rect width="256" height="256" fill="none"></rect>
      <path
        d="M128,88c0-22,18.5-40.3,40.5-40a40,40,0,0,1,36.2,24H240l-32.3,32.3A127.9,127.9,0,0,1,80,224c-32,0-40-12-40-12s32-12,48-36c0,0-64-32-48-120,0,0,40,40,88,48Z"
        fill="none"
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="24"
      ></path>
    </svg>
  );
};

const LinkedinIcon = ({ size = 24, width, height, color = "currentColor" }) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width={width ?? size} height={height ?? size} fill={color} viewBox="0 0 256 256">
      <rect width="256" height="256" fill="none"></rect>
      <rect
        x="36"
        y="36"
        width="184"
        height="184"
        rx="8"
        fill="none"
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="24"
      ></rect>
      <line
        x1="124"
        y1="120"
        x2="124"
        y2="176"
        fill="none"
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="24"
      ></line>
      <line
        x1="84"
        y1="120"
        x2="84"
        y2="176"
        fill="none"
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="24"
      ></line>
      <path
        d="M124,148a28,28,0,0,1,56,0v28"
        fill="none"
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="24"
      ></path>
      <circle cx="84" cy="80" r="16"></circle>
    </svg>
  );
};

const GithubIcon = ({ size = 24, width, height, color = "currentColor" }) => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" width={width ?? size} height={height ?? size} fill={color} viewBox="0 0 256 256">
      <rect width="256" height="256" fill="none"></rect>
      <path d="M224,224a8,8,0,0,1-8,8,32.1,32.1,0,0,1-32-32v-8a16,16,0,0,0-16-16H156v40a16,16,0,0,0,16,16,8,8,0,0,1,0,16,32.1,32.1,0,0,1-32-32V176H116v40a32.1,32.1,0,0,1-32,32,8,8,0,0,1,0-16,16,16,0,0,0,16-16V176H88a16,16,0,0,0-16,16v8a32.1,32.1,0,0,1-32,32,8,8,0,0,1,0-16,16,16,0,0,0,16-16v-8a32.1,32.1,0,0,1,14.8-27A55.8,55.8,0,0,1,48,120v-8a58,58,0,0,1,7.7-28.3A59.9,59.9,0,0,1,61.1,36,7.8,7.8,0,0,1,68,32a59.7,59.7,0,0,1,48,24h24a59.7,59.7,0,0,1,48-24,7.8,7.8,0,0,1,6.9,4,59.9,59.9,0,0,1,5.4,47.7A58,58,0,0,1,208,112v8a55.8,55.8,0,0,1-22.8,45A32.1,32.1,0,0,1,200,192v8a16,16,0,0,0,16,16A8,8,0,0,1,224,224Z"></path>
    </svg>
  );
};
